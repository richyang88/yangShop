{"version":3,"sources":["components/UserView.js","components/UserItem.js","App.js","index.js"],"names":["userListView","Component","state","userList","newUserName","refreshUsers","axios","get","then","response","console","log","_this","setState","data","catch","err","createNewUser","newUser","name","post","onFavoriteClick","userId","userToUpdate","find","user","_id","isLiked","put","concat","refreshusers","onUnFavoriteClick","onuserDeleteClick","delete","onNewUsereNameChange","event","target","value","this","_this2","userListElements","map","react_default","a","createElement","onUserDeleteClick","description","className","type","placeholder","required","onChange","onClick","App","react_router_dom","react_router","exact","path","component","User","ReactDOM","render","src_App","document","getElementById"],"mappings":"kSAOqBA,GCHiBC,uNDOlCC,MAAQ,CACJC,SAAU,GACVC,YAAa,MASjBC,aAAe,WACXC,IAAMC,IAAI,aACLC,KAAK,SAACC,GACHC,QAAQC,IAAIF,GACZG,EAAKC,SAAS,CAACV,SAAUM,EAASK,SAErCC,MAAM,SAACC,GACJN,QAAQC,IAAIK,QAMxBC,cAAgB,WACZ,IAAMC,EAAU,CACZC,KAAMP,EAAKV,MAAME,aAErBE,IAAMc,KAAK,YAAaF,GACnBV,KAAK,SAAAC,GACFC,QAAQC,IAAIF,GACZG,EAAKC,SAAS,CAACT,YAAa,KAE5BQ,EAAKP,oBAOjBgB,gBAAkB,SAACC,GAIf,IAAMC,EAAeX,EAAKV,MAAMC,SAASqB,KAAK,SAACC,GAC3C,GAAIH,IAAWG,EAAKC,IAChB,OAAO,IAGfH,EAAaI,SAAU,EACvBrB,IAAMsB,IAAN,aAAAC,OAAuBP,GAAUC,GAC5Bf,KAAK,SAACC,GACHG,EAAKkB,oBAIjBC,kBAAoB,SAACT,GAIjB,IAAMC,EAAeX,EAAKV,MAAMC,SAASqB,KAAK,SAACC,GAC3C,GAAIH,IAAWG,EAAKC,IAChB,OAAO,IAGfH,EAAaI,SAAU,EACvBrB,IAAMsB,IAAN,aAAAC,OAAuBP,GAAUC,GAC5Bf,KAAK,SAACC,GACHG,EAAKkB,oBAIjBE,kBAAoB,SAACV,GAIjBhB,IAAM2B,OAAN,aAAAJ,OAA0BP,IACrBd,KAAK,SAACC,GACHC,QAAQC,IAAIF,GACZG,EAAKkB,oBAIjBI,qBAAuB,SAACC,GACpB,IAAM/B,EAAc+B,EAAMC,OAAOC,MACjCzB,EAAKC,SAAS,CAACT,YAAaA,wFA7E5BkC,KAAKjC,gDAoFC,IAAAkC,EAAAD,KACAE,EAAmBF,KAAKpC,MAAMC,SAASsC,IAAI,SAAChB,GAC9C,OACAiB,EAAAC,EAAAC,cAAA,gBACItB,OAAQG,EAAKC,IACbmB,kBAAmBN,EAAKM,kBACxB1B,KAAMM,EAAKN,KACX2B,YAAarB,EAAKqB,YAClBnB,QAASF,EAAKE,YAEtB,OACAe,EAAAC,EAAAC,cAAA,OAAKG,UAAU,uBAEXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,UAAf,aAEAL,EAAAC,EAAAC,cAAA,SACII,KAAK,SACL7B,KAAK,cACL8B,YAAY,YACZC,SAAS,WACTC,SAAUb,KAAKJ,qBACfG,MAAOC,KAAKpC,MAAME,cACtBsC,EAAAC,EAAAC,cAAA,UACIQ,QAAS,kBAAMb,EAAKtB,kBADxB,eAGCuB,UAzH6BvC,oBEe3BoD,MAhBf,WACE,OACEX,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACAZ,EAAAC,EAAAC,cAAA,sBAGEF,EAAAC,EAAAC,cAACW,EAAA,EAAD,KAEEb,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,QCV3CC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.4325c785.chunk.js","sourcesContent":["// import './user.css'\nimport React, { Component } from 'react'\nimport axios from 'axios'\n\nimport userViewItem from './UserItem';\n\n\nexport default class userListView extends Component {\n    // initial state of component is empty array\n    //   fill userList with data from backend node server\n\n    state = {\n        userList: [],\n        newUserName: '',\n    }\n\n    componentDidMount() {\n        // get all users and update state 'userList' with results\n        //    route for get all users is '/api/user'\n        this.refreshUsers()\n    }\n\n    refreshUsers = () => {\n        axios.get(\"/api/user\")\n            .then((response) => {\n                console.log(response)\n                this.setState({userList: response.data})\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n    }\n\n    //  Stretch goal is to update page after every change\n\n    createNewUser = () => {\n        const newUser = {\n            name: this.state.newUserName,\n        };\n        axios.post('/api/user', newUser)\n            .then(response => {\n                console.log(response);\n                this.setState({newUserName: ''})\n\n                this.refreshUsers()\n            })\n        // create new user using 'newuserName' in state\n        //    route for creation is '/api/user'\n        //    refresh page to see results\n    }\n\n    onFavoriteClick = (userId) => {\n        // update user isLiked status using existing user data and userId\n        //    route for update is /api/user/\n        //    refresh page to see results\n        const userToUpdate = this.state.userList.find((user) => {\n            if (userId === user._id) {\n                return true\n            }\n        })\n        userToUpdate.isLiked = true\n        axios.put(`/api/user/${userId}`, userToUpdate)\n            .then((response) => {\n                this.refreshusers()\n            })\n    }\n\n    onUnFavoriteClick = (userId) => {\n        // update user isLiked status using existing user data and userId\n        //    route for update is /api/user/\n        //    refresh page to see results\n        const userToUpdate = this.state.userList.find((user) => {\n            if (userId === user._id) {\n                return true\n            }\n        })\n        userToUpdate.isLiked = false\n        axios.put(`/api/user/${userId}`, userToUpdate)\n            .then((response) => {\n                this.refreshusers()\n            })\n    }\n\n    onuserDeleteClick = (userId) => {\n        // delete user using existing userId\n        //    route for delete is /api/user/\n        //    refresh page to see results\n        axios.delete(`/api/user/${userId}`)\n            .then((response) => {\n                console.log(response)\n                this.refreshusers()\n            })\n    }\n\n    onNewUsereNameChange = (event) => {\n        const newUserName = event.target.value;\n        this.setState({newUserName: newUserName})\n    }\n\n\n\n\n\n    render () {\n        const userListElements = this.state.userList.map((user) => {\n            return (\n            <userViewItem \n                userId={user._id}\n                onUserDeleteClick={this.onUserDeleteClick}\n                name={user.name}\n                description={user.description}\n                isLiked={user.isLiked}/>)\n        })\n        return (\n        <div className=\"user-list-container\">\n            \n            <div className=\"header\">User list</div>\n\n            <input\n                type=\"string\"\n                name=\"newUserName\"\n                placeholder=\"user Name\"\n                required=\"required\"\n                onChange={this.onNewUsereNameChange}\n                value={this.state.newUserName}/>\n            <button\n                onClick={() => this.createNewUser()}>Create user</button>\n\n            {userListElements}\n\n        </div>)\n    }\n}","import React, { Component } from 'react'\nimport axios from 'axios'\n\n\nexport default class UserItem extends Component {\n\n    render() {\n        const {\n            userId,\n            name,\n            age,\n            gender,\n            onUserDeleteClick\n        } = this.props;\n\n        return (\n        <div className=\"user-list-item\" key={userId}>\n            <div className=\"name\">{name || ''}</div>\n            <div className=\"age\">{age || ''}</div>\n            <div className=\"gender\">{gender || ''}</div>\n    \n\n            <i className=\"material-icons delete\"\n                onClick={()=> onUserDeleteClick(userId)}>\n                clear\n            </i>\n        </div>);\n    }\n}","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n// import HelloWorld from './components/HelloWorld.js'\nimport User from './components/UserView.js'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n      <div>\n        Testing\n      </div>\n        <Switch>\n          {/* <Route exact path=\"/\" component={HelloWorld}/> */}\n          <Route exact path=\"/\" component={User}/>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}