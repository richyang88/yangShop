{"ast":null,"code":"var _jsxFileName = \"/Users/richardyangCB5/Desktop/SEI_23/classWork/yangShop/client/src/components/UserView.js\";\n// import './user.css'\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport userViewItem from './useItem';\nexport default class userListView extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userList: [],\n      newuserName: ''\n    };\n\n    this.refreshusers = () => {\n      axios.get(\"/api/user\").then(response => {\n        console.log(response);\n        this.setState({\n          userList: response.data\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.createNewuser = () => {\n      const newuser = {\n        name: this.state.newuserName\n      };\n      axios.post('/api/user', newuser).then(response => {\n        console.log(response);\n        this.setState({\n          newuserName: ''\n        });\n        this.refreshusers();\n      }); // create new user using 'newuserName' in state\n      //    route for creation is '/api/user'\n      //    refresh page to see results\n    };\n\n    this.onFavoriteClick = userId => {\n      // update user isLiked status using existing user data and userId\n      //    route for update is /api/user/\n      //    refresh page to see results\n      const userToUpdate = this.state.userList.find(user => {\n        if (userId === user._id) {\n          return true;\n        }\n      });\n      userToUpdate.isLiked = true;\n      axios.put(\"/api/user/\".concat(userId), userToUpdate).then(response => {\n        this.refreshusers();\n      });\n    };\n\n    this.onUnFavoriteClick = userId => {\n      // update user isLiked status using existing user data and userId\n      //    route for update is /api/user/\n      //    refresh page to see results\n      const userToUpdate = this.state.userList.find(user => {\n        if (userId === user._id) {\n          return true;\n        }\n      });\n      userToUpdate.isLiked = false;\n      axios.put(\"/api/user/\".concat(userId), userToUpdate).then(response => {\n        this.refreshusers();\n      });\n    };\n\n    this.onuserDeleteClick = userId => {\n      // delete user using existing userId\n      //    route for delete is /api/user/\n      //    refresh page to see results\n      axios.delete(\"/api/user/\".concat(userId)).then(response => {\n        console.log(response);\n        this.refreshusers();\n      });\n    };\n\n    this.onNewusereNameChange = event => {\n      const newuserName = event.target.value;\n      this.setState({\n        newuserName: newuserName\n      });\n    };\n  }\n\n  componentDidMount() {\n    // get all users and update state 'userList' with results\n    //    route for get all users is '/api/user'\n    this.refreshusers();\n  }\n\n  render() {\n    const userListElements = this.state.userList.map(user => {\n      return React.createElement(\"userViewItem\", {\n        userId: user._id,\n        onFavoriteClick: this.onFavoriteClick,\n        onUnFavoriteClick: this.onUnFavoriteClick,\n        onuserDeleteClick: this.onuserDeleteClick,\n        name: user.name,\n        description: user.description,\n        isLiked: user.isLiked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      className: \"user-list-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"hero-image\",\n      src: \"/hero.jpg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"user list\"), React.createElement(\"input\", {\n      type: \"string\",\n      name: \"newuserName\",\n      placeholder: \"user Name\",\n      required: \"required\",\n      onChange: this.onNewusereNameChange,\n      value: this.state.newuserName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.createNewuser(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Create user\"), userListElements);\n  }\n\n}","map":{"version":3,"sources":["/Users/richardyangCB5/Desktop/SEI_23/classWork/yangShop/client/src/components/UserView.js"],"names":["React","Component","axios","userViewItem","userListView","state","userList","newuserName","refreshusers","get","then","response","console","log","setState","data","catch","err","createNewuser","newuser","name","post","onFavoriteClick","userId","userToUpdate","find","user","_id","isLiked","put","onUnFavoriteClick","onuserDeleteClick","delete","onNewusereNameChange","event","target","value","componentDidMount","render","userListElements","map","description"],"mappings":"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","sourcesContent":["// import './user.css'\nimport React, { Component } from 'react'\nimport axios from 'axios'\n\nimport userViewItem from './useItem';\n\n\nexport default class userListView extends Component {\n    // initial state of component is empty array\n    //   fill userList with data from backend node server\n\n    state = {\n        userList: [],\n        newuserName: '',\n    }\n\n    componentDidMount() {\n        // get all users and update state 'userList' with results\n        //    route for get all users is '/api/user'\n        this.refreshusers()\n    }\n\n    refreshusers = () => {\n        axios.get(\"/api/user\")\n            .then((response) => {\n                console.log(response)\n                this.setState({userList: response.data})\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n    }\n\n    //  Stretch goal is to update page after every change\n\n    createNewuser = () => {\n        const newuser = {\n            name: this.state.newuserName,\n        };\n        axios.post('/api/user', newuser)\n            .then(response => {\n                console.log(response);\n                this.setState({newuserName: ''})\n\n                this.refreshusers()\n            })\n        // create new user using 'newuserName' in state\n        //    route for creation is '/api/user'\n        //    refresh page to see results\n    }\n\n    onFavoriteClick = (userId) => {\n        // update user isLiked status using existing user data and userId\n        //    route for update is /api/user/\n        //    refresh page to see results\n        const userToUpdate = this.state.userList.find((user) => {\n            if (userId === user._id) {\n                return true\n            }\n        })\n        userToUpdate.isLiked = true\n        axios.put(`/api/user/${userId}`, userToUpdate)\n            .then((response) => {\n                this.refreshusers()\n            })\n    }\n\n    onUnFavoriteClick = (userId) => {\n        // update user isLiked status using existing user data and userId\n        //    route for update is /api/user/\n        //    refresh page to see results\n        const userToUpdate = this.state.userList.find((user) => {\n            if (userId === user._id) {\n                return true\n            }\n        })\n        userToUpdate.isLiked = false\n        axios.put(`/api/user/${userId}`, userToUpdate)\n            .then((response) => {\n                this.refreshusers()\n            })\n    }\n\n    onuserDeleteClick = (userId) => {\n        // delete user using existing userId\n        //    route for delete is /api/user/\n        //    refresh page to see results\n        axios.delete(`/api/user/${userId}`)\n            .then((response) => {\n                console.log(response)\n                this.refreshusers()\n            })\n    }\n\n    onNewusereNameChange = (event) => {\n        const newuserName = event.target.value;\n        this.setState({newuserName: newuserName})\n    }\n\n\n\n\n\n    render () {\n        const userListElements = this.state.userList.map((user) => {\n            return (\n            <userViewItem\n                userId={user._id}\n                onFavoriteClick={this.onFavoriteClick}\n                onUnFavoriteClick={this.onUnFavoriteClick}\n                onuserDeleteClick={this.onuserDeleteClick}\n                name={user.name}\n                description={user.description}\n                isLiked={user.isLiked}/>)\n        })\n        return (\n        <div className=\"user-list-container\">\n            <img className=\"hero-image\" src=\"/hero.jpg\"/>\n            <div className=\"header\">user list</div>\n\n            <input\n                type=\"string\"\n                name=\"newuserName\"\n                placeholder=\"user Name\"\n                required=\"required\"\n                onChange={this.onNewusereNameChange}\n                value={this.state.newuserName}/>\n            <button\n                onClick={() => this.createNewuser()}>Create user</button>\n\n            {userListElements}\n\n        </div>)\n    }\n}"]},"metadata":{},"sourceType":"module"}